apiVersion: apps/v1
kind: Deployment
metadata:
  name: app1
  labels: 
    name: app1
    tier: frontend
spec:
  replicas: 1
  selector: 
    matchLabels:
      tier: frontend
      name: app1
  template: 
    metadata:
      labels:
        tier: frontend
        name: app1
    spec:
      containers:
      - name: app1
        image: raidi/app1:v1
---
apiVersion : v1
kind: Service
metadata:
  name: app1
spec:
  selector:
    tier: frontend
    name: app1
  ports:
  - name: nginx-svc-port
    protocol: TCP
    port: 80 # service port
    targetPort: 80 #container port

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
    name: app1
    annotations:
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:983015583980:certificate/219c4d57-3e07-4e63-9793-b0a9bfab5621
      alb.ingress.kubernetes.io/listen-ports: '[ {"HTTPS": 443}]'
      alb.ingress.kubernetes.io/tags: Environment=dev,Team=test
      alb.ingress.kubernetes.io/group.name: expense
      # if someone tries to rech the app over http, redirect to https
      #alb.ingress.kubernetes.io/force-ssl-redirection: 'true'
      #alb.ingress.kubernetes.io/limit-connections : '8'
      #alb.ingress.kubernetes.io/limit-rpm : '60'
spec:
    ingressClassName: alb
    rules:
    - host: "app1.aws-dev-rk.online"
      http:
        paths:
        - pathType: Prefix
          path: "/"
          backend:
            service:
              name: app1
              port:
                number: 80



#wildcard dns domains
# A wildcard DNS record (*.aws-dev-rk.online) pointing to the ALB's DNS name should be created in your DNS provider to access the services using subdomains.
# *.domain.com
#app1.domain.com --> ALB DNS
#app2.domain.com --> ALB DNS
#app3.domain.com --> ALB DNS
# This is especially useful in development and testing environments where multiple services need to be accessed without creating individual DNS records for each service.

#Rate Limiting 
#you can limit controls how many requests a cilent can send to your srvice within a specific time frame.
#

#cors Handling
#CORS (Cross-Origin Resource Sharing) is a security feature implemented by web browsers to restrict web pages from making requests to a different domain than the one that served the web page.
# by configuring CORS settings on the ALB, you can control which domains are allowed to access your services, what HTTP methods are permitted, and which headers can be included in the requests.


#q/a
#Q: even after creating your ingress traffic might not flow as expected. what could be the possible reasons?
#A: if the controller isnt running you might see something 
 # kubectl get pods -n ingress-nginx
 #in case k8 cannont route requests because there no controler to handle the ingress rules
 #
#Q: DNS or host resolution problems if the host defined in your defined in your ingress does nt match the host in the request,traffic will not reach your service.
#A: check the ingress controller external ip to ensure your dns or /etc/hosts points t it
# this ensure that dns records or your /etc/hosts file points the host like (aap1.domain.com)to the ingress controller external ip

#3Q: sometimes path rewrites dont work as expected  , this usually happend when the rewrite target is missing or the regex in you path is incrorrect
#A: if the annotation for rewrite target is missing or incorrect the ingress controller will not be able to rewrite the path as intended
# kubectl describe ingress app1-ingress | grep -i rewrite-target
# double check that your annotation is correct and matches your paths defined in the ingress so that requests correctly before reaching the backend service